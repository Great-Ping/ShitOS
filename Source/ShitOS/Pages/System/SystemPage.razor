@using global::System.Diagnostics
@using ShitOS.Core.Command
@using ShitOS.Core.LoadBalancer
@using ShitOS.Core.Pocessor
@using ShitOS.Core.Task
@using ShitOS.Core.TaskManager
@using ShitOS.Shared.Ui
@using ShitOS.Widgets.TasksTable

@page "/os"

<WidthWrapper>
    <TasksTableWidget Tasks="@(_processor.TaskManager.Tasks)"/>
    
    <button @onclick="AddTask">
        add task
    </button>

    <button @onclick="Run">
        run
    </button>
</WidthWrapper>

@code
{
    private OsCommandsFactory _commandsFactory;
    private OsTaskFactory _taskFactory;
    private OsProcessor _processor;
    private PeriodicTimer _timer;

    
    public SystemPage()
    {
        _timer = new(TimeSpan.FromMilliseconds(200));
        _commandsFactory = OsCommandsFactory.Shared;
        _taskFactory = OsTaskFactory.Shared;
        
        OsTaskManagerOptions taskManagerOptions = new(
        10_000,
        3
        );

        IOsLoadBalancer loadBalancer = new RealativePriorityLoadBalancer();
        QueueOsTaskManager taskManager = new(taskManagerOptions, loadBalancer);
        
        OsProcessorOptions processorOptions = new(
            taskManager,
            10
        );
        
        _processor = new OsProcessor(
            processorOptions
        );
    }

    [Inject]
    public ILogger<SystemPage> Logger { get; init; }

    void AddTask()
    {
        OsTask task = _taskFactory.CreateTask(100, 20);
        _processor.TaskManager.AddTask(task);
    }

    async Task Run()
    {
        while (true)
        {
            _processor.Proceess();
            StateHasChanged();`
            await _timer.WaitForNextTickAsync();
        }
    }
}